import os
import logging
import telebot
import csv
from telebot import types
import time
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '6885524246:AAHnUb7W71CbTofNMw4YrnyLb-bnloBoc4I'
bot = telebot.TeleBot(API_TOKEN)

# –ü–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_FOLDER = 'images'
ANNOTATED_IMAGE_FOLDER = 'annotated_images'
CSV_FILE_PATH = 'weld_defects.csv'
WEB_APP_URL = 'http://65.108.250.169/draw.html?image=images/'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É

# Google Drive API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SERVICE_ACCOUNT_FILE = 'tgbot2-426018-f1f15b697496.json'
SCOPES = ['https://www.googleapis.com/auth/drive.file']

credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
drive_service = build('drive', 'v3', credentials=credentials, cache_discovery=False)

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–∞–ø–æ–∫ –Ω–∞ Google Drive
IMAGE_FOLDER_ID = '1qWzjpJpked8OuEa-AUSWKs0UBijO4ak3'
ANNOTATED_IMAGE_FOLDER_ID = '1BvuP9-DEea-F4Y6Hk_s5UPNLzV5wHzbf'
CSV_FOLDER_ID = '1P7y9VVaMP2Yhv2Aunqnep3CvmyqZbBO7'

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(IMAGE_FOLDER, exist_ok=True)
os.makedirs(ANNOTATED_IMAGE_FOLDER, exist_ok=True)

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ CSV —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(CSV_FILE_PATH):
    with open(CSV_FILE_PATH, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = [
            '–§–ò–û',
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
            '–í–∏–¥ —Å–≤–∞—Ä–∫–∏',
            '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
            '–ú–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
            '–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
            '–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
            '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∏',
            '–°–∏–ª–∞ —Ç–æ–∫–∞',
            '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            '–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            '–î–µ—Ñ–µ–∫—Ç—ã'
        ]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–∞—Ä–∫–µ
STATE_NONE = 0
STATE_WAITING_FOR_FIO = 1
STATE_WAITING_FOR_POSITION = 2
STATE_WAITING_FOR_COMMAND = 3
STATE_WAITING_FOR_SET_WELDING_PARAMS = 4
STATE_WAITING_FOR_IMAGE = 5
STATE_WAITING_FOR_DRAWN_IMAGE = 6
STATE_WAITING_FOR_DEFECT_DETAILS = 7

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–≤–∞—Ä–∫–∏
STATE_WAITING_FOR_WELDING_TYPE = 10
STATE_WAITING_FOR_COVERAGE_TYPE = 11
STATE_WAITING_FOR_ELECTRODE_BRAND = 12
STATE_WAITING_FOR_ELECTRODE_DIAMETER = 13
STATE_WAITING_FOR_CONNECTION_TYPE = 14
STATE_WAITING_FOR_WELDING_POSITION = 15
STATE_WAITING_FOR_CURRENT = 16

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìô About"),
        types.KeyboardButton("üìÑ Types"),
        types.KeyboardButton("üÜò Help"),
        types.KeyboardButton("‚ÅâÔ∏è FAQ"),
        types.KeyboardButton("üóæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
        types.KeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏")
    )
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_data[message.chat.id] = {"state": STATE_WAITING_FOR_FIO}
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    logger.info(f"User {message.chat.id} started the bot and is asked for FIO.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in ["üìô About", "üìÑ Types", "üÜò Help", "‚ÅâÔ∏è FAQ", "üóæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏"])
def handle_menu_buttons(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if message.text == "üìô About":
        bot.send_message(chat_id,
                         "ü§ñ *WeldDefectBot* - —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è —Å–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≤–∞—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π. "
                         "–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –≤—Å–µ –¥–µ—Ñ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.",
                         parse_mode="Markdown")
    elif message.text == "üìÑ Types":
        bot.send_message(chat_id, "–í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å —Ç–∞–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã –∫–∞–∫:\n"
                                  "1. –ê—Å—Å–∏–º–µ—Ç—Ä–∏—è —É–≥–ª–æ–≤–æ–≥–æ —à–≤–∞\n"
                                  "2. –ë—Ä–∏–∑–≥–∏ –º–µ—Ç–∞–ª–ª–∞\n"
                                  "3. –í–æ–ª–∫—Ä–∞–º–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ\n"
                                  "4. –í–∫–ª—é—á–µ–Ω–∏–µ\n"
                                  "5. –í–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ\n"
                                  "6. –í–æ–≥–Ω—É—Ç–æ—Å—Ç—å –∫–æ—Ä–Ω—è —à–≤–∞\n"
                                  "7. –í—ã–ø—É–∫–ª–æ—Å—Ç—å (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–ø–ª–∞–≤–ª–µ–Ω–∏—è) –∫–æ—Ä–Ω—è —à–≤–∞\n"
                                  "8. –ì–ª—É–±–æ–∫–∏–π –≤–∞–ª–∏–∫\n"
                                  "9. –ö—Ä–∞—Ç–µ—Ä–Ω–∞—è —Ç—Ä–µ—â–∏–Ω–∞. –¢—Ä–µ—â–∏–Ω–∞ –≤ –∫—Ä–∞—Ç–µ—Ä–µ\n"
                                  "10. –ö—Ä–∞—Ç–µ—Ä. –£—Å–∞–¥–æ—á–Ω–∞—è —Ä–∞–∫–æ–≤–∏–Ω–∞ —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞\n"
                                  "11. –õ–∏–Ω–∏—è –ø–æ—Ä. –õ–∏–Ω–µ–π–Ω–∞—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å\n"
                                  "12. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏—è\n"
                                  "13. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∫–ª—é—á–µ–Ω–∏—è\n"
                                  "14. –ú–µ—Å—Ç–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–ø–ª–∞–≤–∞\n"
                                  "15. –ù–µ–ø–ª–∞–≤—è—â–∏–π—Å—è –Ω–∞–ø–ª—ã–≤\n"
                                  "16. –ù–∞–ø–ª—ã–≤\n"
                                  "17. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞\n"
                                  "18. –ù–µ–ø—Ä–æ–≤–∞—Ä. –ù–µ–ø–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞—Ä\n"
                                  "19. –ù–µ—Å–ø–æ–ª–æ—à–Ω–æ—Å—Ç—å\n"
                                  "20. –û–∫—Å–∏–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ\n"
                                  "21. –û—Ç—Å–ª–æ–µ–Ω–∏–µ\n"
                                  "22. –ü–ª–æ—Ö–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–≤–∞\n"
                                  "23. –ü–æ–¥—Ä–µ–∑\n"
                                  "24. –ü–æ—Ä—ã\n"
                                  "25. –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—ã–ø—É–∫–ª–æ—Å—Ç–∏\n"
                                  "26. –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —É—Å–∏–ª–µ–Ω–∏—è —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞\n"
                                  "27. –ü—Ä–µ—Ä—ã–≤–∏—Å—Ç–∞—è –ª–∏–Ω–∏—è\n"
                                  "28. –ü—Ä–æ–¥–æ–ª—å–Ω–∞—è —Ç—Ä–µ—â–∏–Ω–∞ —Å–≤–∞—Ä–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª—å–Ω–∞—è —Ç—Ä–µ—â–∏–Ω–∞\n"
                                  "29. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞\n"
                                  "30. –†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç—Ä–µ—â–∏–Ω–∞\n"
                                  "31. –†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–Ω–∞—è —Ç—Ä–µ—â–∏–Ω–∞ —Å–≤–∞—Ä–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–Ω–∞—è —Ç—Ä–µ—â–∏–Ω–∞\n"
                                  "32. –°–∫–æ–ø–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏–π\n"
                                  "33. –°–≤–∏—â –≤ —Å–≤–∞—Ä–Ω–æ–º —à–≤–µ\n"
                                  "34. –¢—Ä–µ—â–∏–Ω–∞ –ø–æ–ø–µ—Ä–µ—á–Ω–∞—è\n"
                                  "35. –¢—Ä–µ—â–∏–Ω–∞ —Å–≤–∞—Ä–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –¢—Ä–µ—â–∏–Ω–∞\n"
                                  "36. –£–≥–ª—É–±–ª–µ–Ω–∏–µ (–∑–∞–ø–∞–¥–∞–Ω–∏–µ) –º–µ–∂–¥—É –≤–∞–ª–∏–∫–∞–º–∏ —à–≤–∞\n"
                                  "37. –£—Å–∞–¥–æ—á–Ω—ã–µ —Ä–∞–∫–æ–≤–∏–Ω—ã\n"
                                  "38. –§–ª—é—Å–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ\n"
                                  "39. –®–ª–∞–∫–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞. –®–ª–∞–∫–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ\n"
                                  "40. –®–ª–∞–∫–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ\n"
                                  "41. –ù–µ—Ä–æ–≤–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —à–≤–∞\n"
                                  "42. –ù–µ—Ä–æ–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —à–≤–∞\n",
                         parse_mode="Markdown")
    elif message.text == "üÜò Help":
        bot.send_message(chat_id,
                         "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞. –Ø —Å–æ—Ö—Ä–∞–Ω—é –µ—ë –∏ —Å–∫–∏–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é. "
                         "–í—ã –º–æ–∂–µ—Ç–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞–º–∏, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é —ç—Ç–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                         "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
                         "0. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–≤–∞—Ä–Ω–æ–º —à–≤–µ.\n"
                         "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞.\n"
                         "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                         "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç.\n"
                         "4. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n"
                         "5. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ Google Drive.",
                         parse_mode="Markdown")
    elif message.text == "‚ÅâÔ∏è FAQ":
        bot.send_message(chat_id,
                         "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n"
                         "1. –ö–∞–∫–æ–π —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞?\n"
                         "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã —Å–≤–∞—Ä–Ω—ã–µ —à–≤—ã.\n\n"
                         "2. –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?\n"
                         "–ü–æ—Å–ª–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç.\n\n"
                         "3. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ?\n"
                         "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ CSV —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ –≤–∞—à Google Drive.",
                         parse_mode="Markdown")
    elif message.text == "üóæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        if "welding_params" in user_data[chat_id]:
            user_data[chat_id]["state"] = STATE_WAITING_FOR_IMAGE
            bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
        else:
            user_data[chat_id]["state"] = STATE_WAITING_FOR_SET_WELDING_PARAMS
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏.")
    elif message.text == "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏":
        user_data[chat_id]["state"] = STATE_WAITING_FOR_WELDING_TYPE
        bot.send_message(chat_id, "–í–∏–¥ —Å–≤–∞—Ä–∫–∏:")
        logger.info(f"User {chat_id} is asked for welding type.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    state = user_data[chat_id].get("state", STATE_NONE)

    if state == STATE_WAITING_FOR_FIO:
        user_data[chat_id]["fio"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_POSITION
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        logger.info(f"User {message.chat.id} provided FIO: {message.text}.")
    elif state == STATE_WAITING_FOR_POSITION:
        user_data[chat_id]["position"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_COMMAND
        bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=create_main_menu())
        logger.info(f"User {message.chat.id} provided position: {message.text}.")
    elif state == STATE_WAITING_FOR_WELDING_TYPE:
        user_data[chat_id].setdefault("welding_params", {})["welding_type"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_COVERAGE_TYPE
        bot.send_message(chat_id, "–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–∞:")
        logger.info(f"User {message.chat.id} provided welding type: {message.text}.")
    elif state == STATE_WAITING_FOR_COVERAGE_TYPE:
        user_data[chat_id]["welding_params"]["coverage_type"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_ELECTRODE_BRAND
        bot.send_message(chat_id, "–ú–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞:")
        logger.info(f"User {message.chat.id} provided coverage type: {message.text}.")
    elif state == STATE_WAITING_FOR_ELECTRODE_BRAND:
        user_data[chat_id]["welding_params"]["electrode_brand"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_ELECTRODE_DIAMETER
        bot.send_message(chat_id, "–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞:")
        logger.info(f"User {message.chat.id} provided electrode brand: {message.text}.")
    elif state == STATE_WAITING_FOR_ELECTRODE_DIAMETER:
        user_data[chat_id]["welding_params"]["electrode_diameter"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_CONNECTION_TYPE
        bot.send_message(chat_id, "–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
        logger.info(f"User {message.chat.id} provided electrode diameter: {message.text}.")
    elif state == STATE_WAITING_FOR_CONNECTION_TYPE:
        user_data[chat_id]["welding_params"]["connection_type"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_WELDING_POSITION
        bot.send_message(chat_id, "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∏:")
        logger.info(f"User {message.chat.id} provided connection type: {message.text}.")
    elif state == STATE_WAITING_FOR_WELDING_POSITION:
        user_data[chat_id]["welding_params"]["welding_position"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_CURRENT
        bot.send_message(chat_id, "–°–∏–ª–∞ —Ç–æ–∫–∞:")
        logger.info(f"User {message.chat.id} provided welding position: {message.text}.")
    elif state == STATE_WAITING_FOR_CURRENT:
        user_data[chat_id]["welding_params"]["current"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_COMMAND
        bot.send_message(chat_id, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=create_main_menu())
        logger.info(f"User {message.chat.id} provided current: {message.text}.")
    elif state == STATE_WAITING_FOR_IMAGE:
        handle_image(message)
    elif state == STATE_WAITING_FOR_DEFECT_DETAILS:
        user_data[chat_id]["defects"] = message.text
        save_data_to_file(chat_id)
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        user_data[chat_id]["state"] = STATE_NONE

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
def upload_file_to_drive(file_path, file_name, mime_type, folder_id):
    file_metadata = {
        'name': file_name,
        'parents': [folder_id]
    }
    media = MediaFileUpload(file_path, mimetype=mime_type)
    file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    return file.get('id')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def save_image(file_info, file_id):
    try:
        files = os.listdir(IMAGE_FOLDER)
        file_number = len(files) + 1
        file_path = os.path.join(IMAGE_FOLDER, f"{file_number}.jpg")

        downloaded_file = bot.download_file(file_info.file_path)

        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        google_drive_id = upload_file_to_drive(file_path, f"{file_number}.jpg", 'image/jpeg', IMAGE_FOLDER_ID)
        file_url = f"https://drive.google.com/file/d/{google_drive_id}/view?usp=sharing"

        logger.info(f"Image saved at path: {file_path} and uploaded to Google Drive")
        return file_path  # –í–µ—Ä–Ω—É—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    except Exception as e:
        logger.error(f"Error saving image: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
def handle_image(message):
    chat_id = message.chat.id
    state = user_data.get(chat_id, {}).get("state", STATE_NONE)

    if state == STATE_WAITING_FOR_IMAGE:
        try:
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)

            file_path = save_image(file_info, file_id)
            if file_path:
                if chat_id not in user_data:
                    user_data[chat_id] = {}
                user_data[chat_id]["image_path"] = file_path
                logger.info(f"Image path saved for user {chat_id}: {file_path}")
                print(f"DEBUG: Image path for user {chat_id} is {user_data[chat_id]['image_path']}")

                image_url = f"{WEB_APP_URL}{os.path.basename(file_path)}"
                bot.send_message(chat_id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤: {image_url}")
                user_data[chat_id]["state"] = STATE_WAITING_FOR_DRAWN_IMAGE
                bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                logger.info(f"Image received and saved as {file_path}. User {chat_id} is asked for annotated image.")
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                logger.error(f"Failed to save image for user {chat_id}.")
        except Exception as e:
            logger.error(f"Error handling image for user {chat_id}: {e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    elif state == STATE_WAITING_FOR_DRAWN_IMAGE:
        handle_annotated_image(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['document', 'photo'])
def handle_annotated_image(message):
    chat_id = message.chat.id
    state = user_data.get(chat_id, {}).get("state", STATE_NONE)

    if state != STATE_WAITING_FOR_DRAWN_IMAGE:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.")
        return

    try:
        logger.info(f"Checking for image_path for user {chat_id}")
        print(f"DEBUG: Checking for image_path for user {chat_id}")

        if 'image_path' not in user_data[chat_id]:
            bot.send_message(chat_id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            logger.error(f"No image path found for user {chat_id} when receiving annotated image.")
            print(f"DEBUG: No image path found for user {chat_id} in user_data")
            return

        logger.info(f"Image path for user {chat_id}: {user_data[chat_id]['image_path']}")
        print(f"DEBUG: Image path for user {chat_id}: {user_data[chat_id]['image_path']}")

        file_id = message.photo[-1].file_id if message.content_type == 'photo' else message.document.file_id
        file_info = bot.get_file(file_id)

        annotated_google_drive_url = save_annotated_image(file_info, user_data[chat_id]["image_path"])
        if annotated_google_drive_url:
            user_data[chat_id]["annotated_image_path"] = annotated_google_drive_url
            bot.send_message(chat_id, "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
            user_data[chat_id]["state"] = STATE_WAITING_FOR_DEFECT_DETAILS
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:")
            logger.info(f"Annotated image received and saved as {annotated_google_drive_url} for user {chat_id}.")
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            logger.error(f"Failed to save annotated image for user {chat_id}.")
    except Exception as e:
        logger.error(f"Error handling annotated image for user {chat_id}: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def save_annotated_image(file_info, original_image_path):
    try:
        base_name = os.path.basename(original_image_path)
        name, ext = os.path.splitext(base_name)
        annotated_file_path = os.path.join(ANNOTATED_IMAGE_FOLDER, f"{name}_a{ext}")

        downloaded_file = bot.download_file(file_info.file_path)

        with open(annotated_file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        google_drive_id = upload_file_to_drive(annotated_file_path, f"{name}_a{ext}", 'image/jpeg', ANNOTATED_IMAGE_FOLDER_ID)
        annotated_google_drive_url = f"https://drive.google.com/file/d/{google_drive_id}/view?usp=sharing"

        logger.info(f"Annotated image saved at path: {annotated_file_path} and uploaded to Google Drive")
        return annotated_google_drive_url
    except Exception as e:
        logger.error(f"Error saving annotated image: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
def search_and_delete_existing_csv(drive_service, folder_id, file_name):
    query = f"'{folder_id}' in parents and name='{file_name}' and mimeType='text/csv'"
    results = drive_service.files().list(q=query, spaces='drive', fields='files(id, name)').execute()
    items = results.get('files', [])
    if items:
        for item in items:
            drive_service.files().delete(fileId=item['id']).execute()
            logger.info(f"Deleted existing CSV file: {item['name']}")

def save_data_to_file(chat_id):
    try:
        data = user_data[chat_id]
        file_url = data.get("image_path", "N/A")
        annotated_google_drive_url = data.get("annotated_image_path", "N/A")
        welding_params = data.get("welding_params", {})
        defects = data.get("defects", "N/A")

        file_exists = os.path.isfile(CSV_FILE_PATH)

        with open(CSV_FILE_PATH, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                '–§–ò–û',
                '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
                '–í–∏–¥ —Å–≤–∞—Ä–∫–∏',
                '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
                '–ú–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
                '–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
                '–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
                '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∏',
                '–°–∏–ª–∞ —Ç–æ–∫–∞',
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                '–î–µ—Ñ–µ–∫—Ç—ã'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            if not file_exists:
                writer.writeheader()

            row = {
                '–§–ò–û': data.get("fio", ""),
                '–î–æ–ª–∂–Ω–æ—Å—Ç—å': data.get("position", ""),
                '–í–∏–¥ —Å–≤–∞—Ä–∫–∏': welding_params.get("welding_type", ""),
                '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–∞': welding_params.get("coverage_type", ""),
                '–ú–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞': welding_params.get("electrode_brand", ""),
                '–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞': welding_params.get("electrode_diameter", ""),
                '–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è': welding_params.get("connection_type", ""),
                '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∏': welding_params.get("welding_position", ""),
                '–°–∏–ª–∞ —Ç–æ–∫–∞': welding_params.get("current", ""),
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': file_url,
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': annotated_google_drive_url,
                '–î–µ—Ñ–µ–∫—Ç—ã': defects
            }
            writer.writerow(row)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ CSV —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ
        search_and_delete_existing_csv(drive_service, CSV_FOLDER_ID, 'weld_defects.csv')
        save_csv_to_drive(CSV_FILE_PATH, 'weld_defects.csv', CSV_FOLDER_ID)

        logger.info(f"Data for user {chat_id} saved to CSV.")
    except Exception as e:
        logger.error(f"Error saving data to file: {e}")

def save_csv_to_drive(file_path, file_name, folder_id):
    file_metadata = {'name': file_name, 'parents': [folder_id]}
    media = MediaFileUpload(file_path, mimetype='text/csv')
    file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    logger.info(f"CSV file {file_name} uploaded to Google Drive")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def run_bot():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"Error: {e}")
            bot.stop_polling()
            time.sleep(15)

if __name__ == "__main__":
    run_bot()
